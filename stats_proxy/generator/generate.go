package main

import (
	"encoding/json"
	"math/rand"
	"time"

	"github.com/Nitro/lagermeister/event"
	"github.com/nats-io/go-nats"
	log "github.com/sirupsen/logrus"
)

var SinePoints = []float64{
	1000, 1006, 1012, 1018, 1025, 1031, 1037, 1043,
	1049, 1055, 1061, 1068, 1074, 1080, 1086, 1092,
	1098, 1104, 1110, 1116, 1123, 1129, 1135, 1141,
	1147, 1153, 1159, 1165, 1171, 1177, 1183, 1189,
	1195, 1201, 1207, 1213, 1219, 1225, 1231, 1237,
	1243, 1249, 1255, 1261, 1267, 1273, 1279, 1285,
	1291, 1296, 1302, 1308, 1314, 1320, 1326, 1331,
	1337, 1343, 1349, 1354, 1360, 1366, 1372, 1377,
	1383, 1389, 1394, 1400, 1406, 1411, 1417, 1422,
	1428, 1433, 1439, 1445, 1450, 1455, 1461, 1466,
	1472, 1477, 1483, 1488, 1493, 1499, 1504, 1509,
	1515, 1520, 1525, 1530, 1535, 1541, 1546, 1551,
	1556, 1561, 1566, 1571, 1576, 1581, 1586, 1591,
	1596, 1601, 1606, 1611, 1616, 1621, 1625, 1630,
	1635, 1640, 1644, 1649, 1654, 1658, 1663, 1668,
	1672, 1677, 1681, 1686, 1690, 1695, 1699, 1703,
	1708, 1712, 1716, 1721, 1725, 1729, 1733, 1737,
	1741, 1746, 1750, 1754, 1758, 1762, 1766, 1770,
	1774, 1777, 1781, 1785, 1789, 1793, 1796, 1800,
	1804, 1807, 1811, 1815, 1818, 1822, 1825, 1829,
	1832, 1835, 1839, 1842, 1845, 1849, 1852, 1855,
	1858, 1861, 1864, 1868, 1871, 1874, 1877, 1880,
	1882, 1885, 1888, 1891, 1894, 1896, 1899, 1902,
	1904, 1907, 1910, 1912, 1915, 1917, 1920, 1922,
	1924, 1927, 1929, 1931, 1933, 1936, 1938, 1940,
	1942, 1944, 1946, 1948, 1950, 1952, 1954, 1956,
	1957, 1959, 1961, 1962, 1964, 1966, 1967, 1969,
	1970, 1972, 1973, 1975, 1976, 1977, 1979, 1980,
	1981, 1982, 1983, 1984, 1986, 1987, 1988, 1988,
	1989, 1990, 1991, 1992, 1993, 1993, 1994, 1995,
	1995, 1996, 1996, 1997, 1997, 1998, 1998, 1999,
	1999, 1999, 1999, 2000, 2000, 2000, 2000, 2000,
	2000, 2000, 2000, 2000, 2000, 1999, 1999, 1999,
	1999, 1998, 1998, 1998, 1997, 1997, 1996, 1996,
	1995, 1994, 1994, 1993, 1992, 1991, 1991, 1990,
	1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982,
	1980, 1979, 1978, 1977, 1975, 1974, 1973, 1971,
	1970, 1968, 1967, 1965, 1963, 1962, 1960, 1958,
	1956, 1955, 1953, 1951, 1949, 1947, 1945, 1943,
	1941, 1939, 1937, 1935, 1932, 1930, 1928, 1925,
	1923, 1921, 1918, 1916, 1913, 1911, 1908, 1906,
	1903, 1900, 1898, 1895, 1892, 1890, 1887, 1884,
	1881, 1878, 1875, 1872, 1869, 1866, 1863, 1860,
	1857, 1853, 1850, 1847, 1844, 1840, 1837, 1834,
	1830, 1827, 1823, 1820, 1816, 1813, 1809, 1806,
	1802, 1798, 1795, 1791, 1787, 1783, 1779, 1776,
	1772, 1768, 1764, 1760, 1756, 1752, 1748, 1744,
	1739, 1735, 1731, 1727, 1723, 1718, 1714, 1710,
	1705, 1701, 1697, 1692, 1688, 1683, 1679, 1674,
	1670, 1665, 1661, 1656, 1651, 1647, 1642, 1637,
	1633, 1628, 1623, 1618, 1613, 1608, 1604, 1599,
	1594, 1589, 1584, 1579, 1574, 1569, 1564, 1559,
	1553, 1548, 1543, 1538, 1533, 1528, 1522, 1517,
	1512, 1507, 1501, 1496, 1491, 1485, 1480, 1475,
	1469, 1464, 1458, 1453, 1447, 1442, 1436, 1431,
	1425, 1420, 1414, 1408, 1403, 1397, 1392, 1386,
	1380, 1375, 1369, 1363, 1357, 1352, 1346, 1340,
	1334, 1329, 1323, 1317, 1311, 1305, 1299, 1293,
	1288, 1282, 1276, 1270, 1264, 1258, 1252, 1246,
	1240, 1234, 1228, 1222, 1216, 1210, 1204, 1198,
	1192, 1186, 1180, 1174, 1168, 1162, 1156, 1150,
	1144, 1138, 1132, 1126, 1119, 1113, 1107, 1101,
	1095, 1089, 1083, 1077, 1071, 1064, 1058, 1052,
	1046, 1040, 1034, 1028, 1021, 1015, 1009, 1003,
	997, 991, 985, 979, 972, 966, 960, 954,
	948, 942, 936, 929, 923, 917, 911, 905,
	899, 893, 887, 881, 874, 868, 862, 856,
	850, 844, 838, 832, 826, 820, 814, 808,
	802, 796, 790, 784, 778, 772, 766, 760,
	754, 748, 742, 736, 730, 724, 718, 712,
	707, 701, 695, 689, 683, 677, 671, 666,
	660, 654, 648, 643, 637, 631, 625, 620,
	614, 608, 603, 597, 592, 586, 580, 575,
	569, 564, 558, 553, 547, 542, 536, 531,
	525, 520, 515, 509, 504, 499, 493, 488,
	483, 478, 472, 467, 462, 457, 452, 447,
	441, 436, 431, 426, 421, 416, 411, 406,
	401, 396, 392, 387, 382, 377, 372, 367,
	363, 358, 353, 349, 344, 339, 335, 330,
	326, 321, 317, 312, 308, 303, 299, 295,
	290, 286, 282, 277, 273, 269, 265, 261,
	256, 252, 248, 244, 240, 236, 232, 228,
	224, 221, 217, 213, 209, 205, 202, 198,
	194, 191, 187, 184, 180, 177, 173, 170,
	166, 163, 160, 156, 153, 150, 147, 143,
	140, 137, 134, 131, 128, 125, 122, 119,
	116, 113, 110, 108, 105, 102, 100, 97,
	94, 92, 89, 87, 84, 82, 79, 77,
	75, 72, 70, 68, 65, 63, 61, 59,
	57, 55, 53, 51, 49, 47, 45, 44,
	42, 40, 38, 37, 35, 33, 32, 30,
	29, 27, 26, 25, 23, 22, 21, 20,
	18, 17, 16, 15, 14, 13, 12, 11,
	10, 9, 9, 8, 7, 6, 6, 5,
	4, 4, 3, 3, 2, 2, 2, 1,
	1, 1, 1, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 5,
	5, 6, 7, 7, 8, 9, 10, 11,
	12, 12, 13, 14, 16, 17, 18, 19,
	20, 21, 23, 24, 25, 27, 28, 30,
	31, 33, 34, 36, 38, 39, 41, 43,
	44, 46, 48, 50, 52, 54, 56, 58,
	60, 62, 64, 67, 69, 71, 73, 76,
	78, 80, 83, 85, 88, 90, 93, 96,
	98, 101, 104, 106, 109, 112, 115, 118,
	120, 123, 126, 129, 132, 136, 139, 142,
	145, 148, 151, 155, 158, 161, 165, 168,
	171, 175, 178, 182, 185, 189, 193, 196,
	200, 204, 207, 211, 215, 219, 223, 226,
	230, 234, 238, 242, 246, 250, 254, 259,
	263, 267, 271, 275, 279, 284, 288, 292,
	297, 301, 305, 310, 314, 319, 323, 328,
	332, 337, 342, 346, 351, 356, 360, 365,
	370, 375, 379, 384, 389, 394, 399, 404,
	409, 414, 419, 424, 429, 434, 439, 444,
	449, 454, 459, 465, 470, 475, 480, 485,
	491, 496, 501, 507, 512, 517, 523, 528,
	534, 539, 545, 550, 555, 561, 567, 572,
	578, 583, 589, 594, 600, 606, 611, 617,
	623, 628, 634, 640, 646, 651, 657, 663,
	669, 674, 680, 686, 692, 698, 704, 709,
	715, 721, 727, 733, 739, 745, 751, 757,
	763, 769, 775, 781, 787, 793, 799, 805,
	811, 817, 823, 829, 835, 841, 847, 853,
	859, 865, 871, 877, 884, 890, 896, 902,
	908, 914, 920, 926, 932, 939, 945, 951,
	957, 963, 969, 975, 982, 988, 994, 1000,
}

var IPs = []string{
	"10.10.10.1",
	"10.12.12.1",
	"10.12.10.10",
}

func random(min, max int) int {
	rand.Seed(time.Now().Unix())
	return rand.Intn(max-min) + min
}

func publishBatchSize(publisherChan chan *event.MetricEvent) {
	var i int
	for {
		evt := &event.MetricEvent{
			Timestamp:  time.Now().UTC().Unix(),
			Value:      SinePoints[i],
			SourceIP:   IPs[random(0,3)],
			Sender:     "sumologic-publisher",
			MetricType: "BatchSize",
		}

		i += 55
		if i > 1023 {
			i = 0
		}

		publisherChan <- evt
		time.Sleep(1 * time.Second)
	}
}

func publishLag(publisherChan chan *event.MetricEvent) {
	thresholds := make(map[string]float64)
	thresholds["Warn"] = 60.0
	thresholds["Error"] = 120.0

	for {

		evt := &event.MetricEvent{
			Timestamp:  time.Now().UTC().Unix(),
			Value:      float64(random(0, 50)),
			SourceIP:   IPs[random(0,3)],
			Sender:     "sumologic-publisher",
			MetricType: "Lag",
			Threshold:  thresholds,
		}

		publisherChan <- evt
		time.Sleep(1 * time.Second)
	}
}

func publishThroughput(publisherChan chan *event.MetricEvent) {
	for {
		httpEvt := &event.MetricEvent{
			Timestamp:  time.Now().UTC().Unix(),
			Value:      float64(random(500, 2048)),
			SourceIP:   IPs[random(0,3)],
			Sender:     "http-receiver",
			MetricType: "Throughput",
		}

		tcpEvt := &event.MetricEvent{
			Timestamp:  time.Now().UTC().Unix(),
			Value:      float64(random(100, 755)),
			SourceIP:   IPs[random(0,3)],
			Sender:     "tcp-receiver",
			MetricType: "Throughput",
		}

		publisherChan <- httpEvt
		publisherChan <- tcpEvt
		time.Sleep(1 * time.Second)
	}
}

func publisher(publishChan chan *event.MetricEvent) {
	nc, _ := nats.Connect(nats.DefaultURL)

	for evt := range publishChan {
		data, err := json.Marshal(*evt)
		if err != nil {
			log.Warnf("Unable to JSON marshal event: %s", err)
			continue
		}

		err = nc.Publish("stats-events", data)
		if err != nil {
			log.Warnf("Unable to publish event: %s", err)
			continue
		}
	}

	nc.Close()
}

func main() {
	publisherChan := make(chan *event.MetricEvent, 100)

	go publisher(publisherChan)
	go publishLag(publisherChan)
	go publishThroughput(publisherChan)
	go publishBatchSize(publisherChan)

	select {}
}
